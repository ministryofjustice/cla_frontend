version: 2.1
orbs:
  slack: circleci/slack@3.4.2
jobs:
  build_for_template_deploy:
    docker:
      - image: docker:17.03-git
    environment:
      DOCKER_HUB_REGISTRY: "index.docker.io"
      DOCKER_HUB_IMAGE: "ministryofjustice/cla_frontend"
    steps:
      - checkout
      - setup_remote_docker:
          version: 17.03.0-ce
          docker_layer_caching: true
      - run:
          name: Login to the Dockerhub registry
          command: |
            docker login \
              --username $DOCKER_HUB_USERNAME \
              --password $DOCKER_HUB_PASSWORD \
              --email "$DOCKER_HUB_EMAIL"
      - run:
          name: Build Docker image
          command: |
            docker build --tag application:$CIRCLE_SHA1 \
              --label build.git.sha=$CIRCLE_SHA1 \
              --label build.git.branch=$CIRCLE_BRANCH \
              --label build.url=$CIRCLE_BUILD_URL \
              --file template_deploy/Dockerfile \
              .
      - run:
          name: Validate Python version
          command: docker run --rm --tty --interactive application:$CIRCLE_SHA1 python --version | grep "2.7"
      - run:
          name: Validate that image runs on Europe/London timezone
          command: docker run --rm --tty --interactive application:$CIRCLE_SHA1 date '+%Z' | egrep "(GMT|BST)"
      - run:
          name: Tag and push Docker images
          command: template_deploy/tag_and_push_docker_image application:$CIRCLE_SHA1
  build:
    parameters:
      image:
        type: string
    docker:
      - image: docker:19.03-git
    steps:
      - checkout
      - setup_remote_docker:
          version: "20.10.2"
          docker_layer_caching: true
      - run:
          name: Login to the ECR Docker registry
          command: |
            apk add --no-cache --no-progress py3-pip
            pip install awscli
            ecr_login="$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)"
            ${ecr_login}
      - when:
          condition:
            equal: ["app", << parameters.image >>]
          steps:
            - run:
                name: Build app Docker image
                command: |
                  docker build --tag << parameters.image >>:$CIRCLE_SHA1 \
                    --label build.git.sha=$CIRCLE_SHA1 \
                    --label build.git.branch=$CIRCLE_BRANCH \
                    --label build.url=$CIRCLE_BUILD_URL \
                    --file Dockerfile \
                    .
            - run:
                name: Validate Python version
                command: |
                  docker run --rm --tty --interactive << parameters.image >>:$CIRCLE_SHA1 python --version | grep "2.7"
      - when:
          condition:
            equal: ["socket-server", << parameters.image >>]
          steps:
            - run:
                name: Build socket server Docker image
                command: |
                  docker build --tag << parameters.image >>:$CIRCLE_SHA1 \
                    --label build.git.sha=$CIRCLE_SHA1 \
                    --label build.git.branch=$CIRCLE_BRANCH \
                    --label build.url=$CIRCLE_BUILD_URL \
                    --file Dockerfile.socket-server \
                    .
      - run:
          name: Tag and push Docker image
          command: |
            .circleci/tag_and_push_docker_image << parameters.image >>:$CIRCLE_SHA1 << parameters.image >>
  python_lint:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            pip install virtualenv
            virtualenv lint-env
      - restore_cache:
          keys:
            - pip-v1-{{ checksum "requirements/lint.txt" }}
      - run:
          name: Install dependencies
          command: |
            source lint-env/bin/activate
            pip install --requirement requirements/lint.txt
      - save_cache:
          key: pip-v1-{{ checksum "requirements/lint.txt" }}
          paths:
            - "~/.cache/pip"
      - run:
          name: Lint with flake8
          command: |
            source lint-env/bin/activate
            flake8 --exit-zero cla_frontend
      - run:
          name: Check formatting with Black
          command: |
            source lint-env/bin/activate
            black --check cla_frontend
  python_unit_test:
    docker:
      - image: circleci/python:2.7
        environment:
          DJANGO_SETTINGS_MODULE: cla_frontend.settings.testing
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            pip install virtualenv
            virtualenv env
            source env/bin/activate
            pip install pip==18.1
      - restore_cache:
          keys:
            - pip-v1-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/testing.txt" }}
      - run:
          name: Install dependencies
          command: |
            source env/bin/activate
            pip install --requirement requirements/testing.txt
      - save_cache:
          key: pip-v1-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/testing.txt" }}
          paths:
            - "~/.cache/pip"
      - run:
          name: Run unit tests
          command: |
            source env/bin/activate
            python manage.py test --verbosity=2
  javascript_unit_test:
    docker:
      - image: circleci/node:8.9.3
        environment:
          DJANGO_SETTINGS_MODULE: cla_frontend.settings.test
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package-lock.json" }}
      - run:
          name: Install Node JS dependencies
          command: npm install
      - save_cache:
          key: node-v1-{{ checksum "package-lock.json" }}
          paths:
            - "./node_modules"
      - restore_cache:
          keys:
            - bower-v1-{{ checksum "bower.json" }}
      - run:
          name: Install Bower dependencies
          command: npm run bower
      - save_cache:
          key: bower-v1-{{ checksum "bower.json" }}
          paths:
            - "./cla_frontend/assets-src/vendor"
      - run:
          name: Bundle JavaScript
          command: npm run js
      - run:
          name: Run Jasmine unit tests
          command: npm run test-single-run
  deploy:
    parameters:
      namespace:
        type: string
      dynamic_hostname:
        type: boolean
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
    shell: /bin/sh -leo pipefail
    environment:
      BASH_ENV: /etc/profile
    steps:
      - checkout
      - run:
          name: Install helm v3
          command: |
            wget https://get.helm.sh/helm-v3.1.2-linux-amd64.tar.gz
            tar -zxvf helm-v3.1.2-linux-amd64.tar.gz
            mv linux-amd64/helm /usr/local/bin/helm
      - run:
          name: Initialise Kubernetes << parameters.namespace >> context
          command: |
            setup-kube-auth
            kubectl config use-context << parameters.namespace >>
      - deploy:
          name: Deploy to << parameters.namespace >>
          command: |
            source .circleci/define_build_environment_variables << parameters.namespace >> << parameters.dynamic_hostname >>
            pip3 install requests
            export PINGDOM_IPS=`python3 bin/pingdom_ips.py`
            ./bin/<< parameters.namespace >>_deploy.sh << parameters.dynamic_hostname >>
            echo "export RELEASE_HOST=$RELEASE_HOST" >> $BASH_ENV
      - slack/notify:
          message: ':tada: (<< parameters.namespace >>) Deployed branch $CIRCLE_BRANCH'
          title: '$RELEASE_HOST'
          title_link: 'https://$RELEASE_HOST/admin/'

workflows:
  version: 2
  test_and_build:
    jobs:
      - python_lint
      - python_unit_test
      - javascript_unit_test
      - build_for_template_deploy:
          requires:
            - python_lint
            - python_unit_test
            - javascript_unit_test
      - build:
          name: build_app
          image: app
          requires:
            - python_lint
            - python_unit_test
            - javascript_unit_test
          context:
            - laa-cla-frontend
            - laa-cla-frontend-app-ecr
      - build:
          name: build_socket_server
          image: socket-server
          requires:
            - python_lint
            - python_unit_test
            - javascript_unit_test
          context:
            - laa-cla-frontend
            - laa-cla-frontend-socket-server-ecr
      - staging_deploy_approval:
          type: approval
          requires:
            - build_app
            - build_socket_server
      - deploy:
          name: staging_deploy
          namespace: staging
          dynamic_hostname: false
          requires:
            - staging_deploy_approval
          context:
            - laa-cla-frontend
            - laa-cla-frontend-app-ecr
