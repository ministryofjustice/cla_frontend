version: 2.1
orbs:
  slack: circleci/slack@3.4.2
  node: circleci/node@5.0.2
  cla-end-to-end-tests: ministryofjustice/cla-end-to-end-tests@volatile
  aws-cli: circleci/aws-cli@4.0.0 # use v4 of this orb
  aws-ecr: circleci/aws-ecr@8.2.1 # this orb doesn't support OIDC v2, so we use aws-cli to authenticate

# ------------------
# EXECUTORS
# these are ones we use rather than one from rom the orb
# ------------------

executors:
  cloud-platform-executor:
    docker:
      - image: ministryofjustice/cloud-platform-tools:2.1
  python2-executor:
    docker:
      - image: cimg/python:2.7
  python3-executor:
    docker:
      - image: cimg/python:3.7


# ------------------
#
# REFERENCES
#
# ------------------

references:
  install_helm: &install_helm
      run:
        name: Install helm v3
        command: |
          wget https://get.helm.sh/helm-v3.2.4-linux-amd64.tar.gz
          tar -zxvf helm-v3.2.4-linux-amd64.tar.gz
          mv linux-amd64/helm /usr/local/bin/helm


# ------------------
#
# JOBS
#
# ------------------
jobs:
  build:
    executor: aws-ecr/default # use the aws-ecr/default executor to start the docker daemon
    parameters:
      image:
        type: string
      ecr_role_to_assume:
        type: string
    steps:
      - checkout
      - run:
          name: Create target tags
          command: |
            source .circleci/define_build_environment_variables
            echo "Created tags $TARGET_TAGS"
            echo "export BUILD_TAGS=$TARGET_TAGS" >> $BASH_ENV
            echo "export IMAGE_TAG=$IMAGE_TAG" >> $BASH_ENV
 # Authenticate to AWS using OIDC v2 with the AWS CLI
      - aws-cli/setup:
          role_arn: << parameters.ecr_role_to_assume >> # this will use the env var
          region: $ECR_REGION # this will use the env var
      # Authenticate to the ECR repository using the standard command
      - run: |
          aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com
      - when:
          condition:
            equal: ["app", << parameters.image >>]
          steps:
            - aws-ecr/build-image:
                push-image: true
                tag: $BUILD_TAGS
                region: $ECR_REGION # this will use the env var
                repo: $ECR_APP_REPOSITORY # this will use the env var
            # Validate the python version as 2.7
            - run:
                name: Validate Python version
                command: |
                  docker run --rm --tty --interactive ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com/$ECR_APP_REPOSITORY:$IMAGE_TAG python --version | grep "2.7"
      - when:
          condition:
            equal: ["socket-server", << parameters.image >>]
          steps:
            - aws-ecr/build-image:
                push-image: true
                path: cla_socketserver
                build-path: cla_socketserver
                tag: $BUILD_TAGS
                region: $ECR_REGION # this will use the env var
                repo: $ECR_SOCKET_SERVER_REPOSITORY
  lint:
    executor: python2-executor
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            pip install virtualenv
            virtualenv lint-env
      - restore_cache:
          keys:
            - pip-v1-{{ checksum "requirements/generated/requirements-lint.txt" }}
      - run:
          name: Install dependencies
          command: |
            source lint-env/bin/activate
            pip install --requirement requirements/generated/requirements-lint.txt
      - save_cache:
          key: pip-v1-{{ checksum "requirements/generated/requirements-lint.txt" }}
          paths:
            - "~/.cache/pip"
      - run:
          name: Lint with flake8 (warnings only)
          command: |
            source lint-env/bin/activate
            flake8 --exit-zero cla_frontend
  formatting:
    executor: python3-executor
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            pip install virtualenv
            virtualenv formatting-env
      - restore_cache:
          keys:
            - pip-v1-black-18.9b0
      - run:
          name: Install dependencies
          command: |
            source formatting-env/bin/activate
            pip install black>=18.9b0
      - save_cache:
          key: pip-v1-black-18.9b0
          paths:
            - "~/.cache/pip"
      - run:
          name: Check formatting with Black
          command: |
            source lint-env/bin/activate
            black --check cla_frontend
  pip-compile:
    executor: python2-executor
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            echo "Installing ibcurl4-gnutls-dev because it is required for pycurl"
            sudo apt-get update
            sudo apt-get install -y libcurl4-gnutls-dev
            pip install virtualenv
            virtualenv pip-compile-env
      - restore_cache:
          keys:
            - pip-v1-pip-compile
      - run:
          name: Install dependencies
          command: |
            source pip-compile-env/bin/activate
            pip install pre-commit==1.14.2
      - save_cache:
          key: pip-v1-pip-compile
          paths:
            - "~/.cache/pip"
      - run:
          name: Check for changes with pip-compile
          command: |
            source pip-compile-env/bin/activate
            ls requirements/source/* | xargs pre-commit run pip-compile --files
  python_unit_test:
    docker:
      - image: cimg/python:2.7
        environment:
          DJANGO_SETTINGS_MODULE: cla_frontend.settings.testing
          SECRET_KEY: testing_key
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            pip install virtualenv
            virtualenv env
            source env/bin/activate
            pip install pip==18.1
      - restore_cache:
          keys:
            - pip-v1-{{ checksum "requirements/generated/requirements-base.txt" }}-{{ checksum "requirements/generated/requirements-testing.txt" }}
      - run:
          name: Install dependencies
          command: |
            source env/bin/activate
            pip install --requirement requirements/generated/requirements-testing.txt
      - save_cache:
          key: pip-v1-{{ checksum "requirements/generated/requirements-base.txt" }}-{{ checksum "requirements/generated/requirements-testing.txt" }}
          paths:
            - "~/.cache/pip"
      - run:
          name: Run unit tests
          command: |
            source env/bin/activate
            python manage.py test --verbosity=2
  socket_server_tests:
    docker:
      - image: cimg/node:18.8.0

    steps:
      - checkout
      - node/install:
          node-version: '18'
      - run:
          working_directory: ./cla_socketserver
          name: Install dependencies
          command: |
            npm install --include dev
      - run:
          working_directory: ./cla_socketserver
          name: Run tests
          command: |
            npm run test
  javascript_unit_test:
    docker:
      - image: cimg/node:18.8.0
        environment:
          DJANGO_SETTINGS_MODULE: cla_frontend.settings.test
    steps:
      - checkout
      - node/install:
          install-yarn: true
          node-version: '8.9.3'
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package-lock.json" }}
      - run:
          name: Install Node JS dependencies
          command: |
            sudo apt-get update && sudo apt-get install -y libfontconfig
            ./npm_git_wrapper.sh
      - save_cache:
          key: node-v1-{{ checksum "package-lock.json" }}
          paths:
            - "./node_modules"
      - restore_cache:
          keys:
            - bower-v1-{{ checksum "bower.json" }}
      - run:
          name: Install Bower dependencies
          command: npm run bower
      - save_cache:
          key: bower-v1-{{ checksum "bower.json" }}
          paths:
            - "./cla_frontend/assets-src/vendor"
      - run:
          name: Bundle JavaScript
          command: npm run js
      - run:
          name: Run Jasmine unit tests
          command: |
            npm install
            npm run test-single-run
  deploy:
    parameters:
      namespace:
        type: string
      dynamic_hostname:
        type: boolean
    executor: cloud-platform-executor
    shell: /bin/sh -leo pipefail
    environment:
      BASH_ENV: /etc/profile
    steps:
      - checkout
      - *install_helm
      - run:
          name: Authenticate with cluster
          command: |
            .circleci/authenticate_with_kubernetes_cluster
      - deploy:
          name: Deploy to << parameters.namespace >>
          command: |
            export INGRESS_CLUSTER_NAME=`kubectl get configmap ingress-cluster -o jsonpath='{.data.name}'`
            export INGRESS_CLUSTER_WEIGHT=`kubectl get configmap ingress-cluster -o jsonpath='{.data.weight}'`
            source .circleci/define_build_environment_variables << parameters.namespace >> << parameters.dynamic_hostname >>
            pip3 install requests
            export PINGDOM_IPS=`python3 bin/pingdom_ips.py`
            ./bin/<< parameters.namespace >>_deploy.sh << parameters.dynamic_hostname >>
            echo "export RELEASE_HOST=$RELEASE_HOST" >> $BASH_ENV
      - slack/notify:
          message: ":tada: (<< parameters.namespace >>) Deployed branch $CIRCLE_BRANCH"
          title: "$RELEASE_HOST"
          title_link: "https://$RELEASE_HOST"

  cleanup_merged:
    executor: cloud-platform-executor
    steps:
      - checkout
      - *install_helm
      - run:
          name: Authenticate with cluster
          command: |
            .circleci/authenticate_with_kubernetes_cluster
      - run:
          name: Delete uat release
          command: |
            ./bin/delete_uat_release.sh

  behave:
    executor: aws-ecr/default
    steps:
      - checkout:
          path: cla_frontend
      - run: |
          cd cla_frontend
          source .circleci/define_build_environment_variables
          export APP_IMAGE=$ECR_URL_APP:$IMAGE_TAG
          export SOCKET_IMAGE=$ECR_URL_SOCKET_SERVER:$IMAGE_TAG
          echo "export CLA_FRONTEND_IMAGE=$APP_IMAGE; export CLA_SOCKET_SERVER_IMAGE=$SOCKET_IMAGE" >> $BASH_ENV
          echo "Setting CLA Frontend image $APP_IMAGE"
          echo "Setting CLA Socket Server image $SOCKET_IMAGE"
      - cla-end-to-end-tests/behave
      
# ------------------
#
# WORKFLOWS
#
# ------------------
workflows:
  version: 2
  test_and_build:
    jobs:
      - lint
      - pip-compile
      - python_unit_test
      - socket_server_tests
      - javascript_unit_test
      - cleanup_merged:
          name: cleanup_merged_live
          context:
            - laa-cla-frontend
            - laa-cla-frontend-live-uat
      - build:
          name: build_app
          image: app
          ecr_role_to_assume: "$ECR_APP_ROLE_TO_ASSUME"
          requires:
            - lint
            - python_unit_test
            - javascript_unit_test
          context:
            - laa-cla-frontend
      - build:
          name: build_socket_server
          image: socket-server
          ecr_role_to_assume: "$ECR_SOCKET_SERVER_ROLE_TO_ASSUME"
          requires:
            - lint
            - python_unit_test
            - javascript_unit_test
            - socket_server_tests
          context:
            - laa-cla-frontend
      - behave:
          environment:
            SESSION_COOKIE_SECURE: "False"
            SECURE_CONTENT_TYPE_NOSNIFF: "False"
            CSRF_COOKIE_SECURE: "False"
            CSRF_COOKIE_SAMESITE: "False"
            SESSION_COOKIE_SAMESITE: "False"
            SESSION_COOKIE_HTTPONLY: "False"
          requires:
            - build_socket_server
            - build_app
          context:
            - laa-cla-frontend

      - deploy:
          name: uat_deploy_live
          namespace: uat
          dynamic_hostname: true
          requires:
            - build_app
            - build_socket_server
          context:
            - laa-cla-frontend
            - laa-cla-frontend-live-uat

      - static_uat_deploy_approval:
          type: approval
          requires:
            - build_app
            - build_socket_server

      - deploy:
          name: static_uat_deploy_live
          namespace: uat
          dynamic_hostname: false
          requires:
            - static_uat_deploy_approval
          context:
            - laa-cla-frontend
            - laa-cla-frontend-live-uat

      - staging_deploy_approval:
          type: approval
          requires:
            - build_app
            - build_socket_server
          filters:
            branches:
              only:
                - master

      - deploy:
          name: staging_deploy_live
          namespace: staging
          dynamic_hostname: false
          requires:
            - staging_deploy_approval
          context:
            - laa-cla-frontend
            - laa-cla-frontend-live-staging

      - production_deploy_approval:
          requires:
            - staging_deploy_live
          type: approval
          filters:
            branches:
              only:
                - master

      - deploy:
          name: training_deploy_live
          namespace: training
          dynamic_hostname: false
          requires:
            - production_deploy_approval
          context:
            - laa-cla-frontend
            - laa-cla-frontend-live-training

      - deploy:
          name: production_deploy_live
          namespace: production
          dynamic_hostname: false
          requires:
            - production_deploy_approval
          context:
            - laa-cla-frontend
            - laa-cla-frontend-live-production
